import Head from 'next/head'
import { useEffect } from 'react';
import useProtectedPage from '../hooks/useProtectedPage';
import { useState } from 'react';
import UserCard from '../components/UserCard';
import useForm from '../hooks/useForm';
import Link from 'next/link';

const getUsers = async (page = 1, name = '') => {
    const token = localStorage.getItem('token');

    const content = {
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': `${token}`
        },
        method: 'GET',
    }

    const data = await fetch(`${process.env.NEXT_PUBLIC_SERVER_BASE_URL}/users?page=${page}&name=${name}`, content)
    const response = await data.json()

    if (response) {
        return response
    } 

}

export default function Users () {
    useProtectedPage()

    const [users, setUsers] = useState<any[]>([])
    const [page, setPage] = useState(1)
    const [form, onchange, clear] = useForm({name: ''})
    const [count, setCount] = useState(9)

    const pages = Math.ceil(count / 9)

    useEffect(() => {
        getUsers()
        .then((response) => {
            setUsers(response.users)
            setCount(response.count[0]['count(`id`)'])
        })
        .catch((err) => {
            console.log(err)
        })
    }, [])

    const renderUsers = users.map((user) => {
        return (
            <>
                <Link href={`/user/${user.id}`} passHref >
                    <div className='cursor-pointer hover:bg-gray-200 rounded-xl'>
                        <UserCard user={user} key={user.id} />
                    </div>
                </Link>
            </>
        )
    }) 

    const getOtherPage = async (otherPage: number) => {
        const token = localStorage.getItem('token')?.toString()

        const content = {
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': `${token}`
        },
        method: 'GET',
        }

        const data = await fetch(`${process.env.NEXT_PUBLIC_SERVER_BASE_URL}/users?page=${otherPage}`, content)
        const response = await data.json()

        console.log(response.users)
        setPage(otherPage)
        setUsers(response.users)
    }

    const renderPagesNav = () => {
        const pages = Math.ceil(count / 9)

        if (pages <= 1){
            return (
                <></>
            )
        } else if (pages <= 5){
            const showInNav = []

            for (let i = 1; i <= pages; i++){
                showInNav.push(i)
            }

            const displayElements = showInNav.map((element) => {
                return(
                    <>
                        <p className='cursor-pointer hover:text-blue-700' onClick={() => getOtherPage(element)}>{element}</p>
                    </>
                )
            })

            return(
                <>
                    <div className='flex items-center justify-center gap-2'>
                        {displayElements}
                    </div>
                </>
            )
        } else {
            let showInNav: any[] = []

            if (page === 1){
                showInNav = []
            } else {
                showInNav = ['...', `${page - 1}`]
            }

            for (let i = page; showInNav.length <= 5; i++){
                if (showInNav.length === 4){
                    showInNav.push('...')
                } else {
                    showInNav.push(i)
                }
            }

            const displayElements = showInNav.map((element) => {
                if (element !== '...'){
                    return(
                        <>
                            <p className='cursor-pointer hover:text-blue-700' onClick={() => getOtherPage(element)}>{element}</p>
                        </>
                    )
                } else {
                    return(
                        <>
                            <p className='cursor-pointer hover:text-blue-700'>{element}</p>
                        </>
                    )
                }
            })

            return(
                <>
                    <div className='flex items-center justify-center gap-2'>
                        {displayElements}
                    </div>
                </>
            )
        }


    }

    const onSubmitSearch = async (e: any) => {
        e.preventDefault()

        const users = await getUsers(page, form.name)

        setUsers(users.users)
    }
    return (
        <>
            <Head>
                <title>Gerador de Documentos | CASAL | Buscar Usuários</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/casal_favicon.png" />
            </Head>
            <main className="px-4 lg:px-0 max-w-screen-xl mx-auto my-10 flex flex-col items-start justify-start gap-8">
                <form className='w-full flex items-center justify-center' onSubmit={onSubmitSearch}>
                    <label htmlFor="name" className="font-mono text-md font-light">Busque por nome: </label>
                    <input type="text" name="name" id="name" placeholder='Nome...' value={form.name} onChange={onchange} className='bg-gray-200 w-44 h-6 rounded-lg ml-4' />
                </form>
                <div className='flex flex-col items-center justify-center'>
                    <div className='flex flex-wrap items-start justify-between gap-8'>
                        {users && renderUsers}
                    </div>
                    <div className='grid grid-cols-4 gap-4 mt-4'>
                {page - 1 > 0 ?
                <div className='flex flex-col items-center justify-center cursor-pointer hover:text-blue-700' onClick={() => getOtherPage(page - 1)}>
                    <p>←</p>
                    <p className="font-mono text-xs font-light">Anterior</p>
                </div>
                :
                <div className='flex flex-col items-center justify-center opacity-30 cursor-not-allowed'>
                    <p>←</p>
                    <p className="font-mono text-xs font-light">Anterior</p>
                </div>
                }
                <div className='col-start-2 col-end-4'>
                    {renderPagesNav()}
                </div>
                {page < pages ?
                <div className='flex flex-col items-center justify-center cursor-pointer hover:text-blue-700' onClick={() => getOtherPage(page + 1)}>
                    <p>→</p>
                    <p className="font-mono text-xs font-light">Próximo</p>
                </div>
                :
                <div className='flex flex-col items-center justify-center opacity-30 cursor-not-allowed'>
                    <p>→</p>
                    <p className="font-mono text-xs font-light">Próximo</p>
                </div>
                }
            </div>
                </div>
            </main>
        </>
    )
}